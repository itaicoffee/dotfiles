#!/usr/bin/env python3
import sys
from pathlib import Path
import subprocess
from difflib import get_close_matches
import json
import os


def load_config():
    """Load configuration from ~/.config/book/config.json if it exists"""
    config_path = Path.home() / ".config" / "book" / "config.json"
    if config_path.exists():
        with open(config_path) as f:
            return json.load(f)
    return {}

def find_best_match(name, names):
    """Find the closest matching name using fuzzy matching"""
    matches = get_close_matches(name.lower(), names, n=1, cutoff=0.6)
    return matches[0] if matches else None

def open_url(url):
    """Open URL using the url script with work profile"""
    try:
        # Source .profile first, then run the url command
        command = f'. "$HOME/.profile" && url "{url}" "$CHROME_PROFILE_WORK"'
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running url script: {e}", file=sys.stderr)
        sys.exit(1)

def close_iterm():
    command = "close_iterm"
    subprocess.run(command, shell=True, check=True)
    
def main():
    if len(sys.argv) != 2:
        print("Usage: one <name>", file=sys.stderr)
        sys.exit(1)

    search_name = sys.argv[1]
    people = load_config()
    
    # Try to find a match
    match = find_best_match(search_name, people.keys())
    
    if not match:
        print(f"No match found for '{search_name}'", file=sys.stderr)
        print("Available names:", ", ".join(sorted(people.keys())), file=sys.stderr)
        sys.exit(1)
    
    url = people[match]
    print(f"Opening URL for {match}...")
    open_url(url)
    close_iterm()

if __name__ == "__main__":
    main()
